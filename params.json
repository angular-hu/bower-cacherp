{"name":"angular-hu-cacherp","tagline":"Remove request parameters from $http cache - httpu.cacherp","body":"\r\n## httpu.cacherp\r\n\r\nFactory that decorates the  [$cacheFactory.Cache](https://docs.angularjs.org/api/ng/type/$cacheFactory.Cache) created by the specified [$cacheFactory](https://docs.angularjs.org/api/ng/service/$cacheFactory). It creates caches meant to be used by the [$http](https://docs.angularjs.org/api/ng/service/$http) service that will remove some request parameters from the URL (that is used as cache key)\r\n\r\n### Installation\r\n\r\nGet it from [bower](http://bower.io/) or directly download it.\r\n\r\n```sh\r\nbower install --save angular-hu-cacherp\r\n```\r\n\r\nAdd the dependency in the HTML\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"bower_components/angular-hu-cacherp/cacherp.js\"></script>\r\n```\r\n\r\nAdd the `httpu.cacherp` dependency to your App Module\r\n\r\n```js\r\nangular.module('MyApp', ['httpu.cacherp']);\r\n```\r\n\r\nThe `huCacherpFactory` dependency is now available\r\n\r\n### Usage\r\n\r\n```js\r\nangular.module('MyApp')\r\n//Create the same cache a $cacheFactory would create, but this cache will drop 'timestamp' queryParamter from the URL\r\n.factory('apiCache', function(huCacherpFactory, $cacheFactory) {\r\n  return huCacherpFactory(\r\n    'apiCache',  //The cache ID\r\n    { //options to be passed to the cacheFactory specified below.\r\n      removableParams: [ //Array with the parameters that wouldnt be taken into account when hitting caches\r\n        'timestamp' \r\n      ],\r\n      capacity: 10\r\n    },\r\n    $cacheFactory  //The cacheFactory that will be used for creating this decorated cache\r\n  );\r\n})\r\n.run(function($http, apiCache) {\r\n  //Make a timestamped request, and cache response for id=5. timestamp param will be removed\r\n  $http.get('http://myapi.com/things?id=5&timestamp=' + Date.now(), {\r\n    cache: apiCache\r\n  });\r\n  \r\n  //this request will hit the cache!!\r\n  $http.get('http://myapi.com/things?id=5&timestamp=' + Date.now() + 1000, {\r\n    cache: apiCache\r\n  });\r\n  \r\n});\r\n```\r\n\r\n### Use cases\r\n\r\n* You have a backend that need variable request parameters, like oauth1 backends, and wanna cache those requests\r\n\r\n## LICENSE\r\n\r\nThe MIT License ([MIT](LICENSE))\r\n\r\nCopyright (c) 2015 Telef√≥nica I+D - http://www.tid.es\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}